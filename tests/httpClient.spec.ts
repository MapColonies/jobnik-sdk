// Generated by Copilot
/**
 * @fileoverview Tests for httpClient using undici MockAgent and jest.
 */
import { MockAgent, MockPool } from 'undici';
import { createRetryAgent } from '../src/network/httpClient';

/* eslint-disable */
// Add type declaration for global mockAgent
declare global {
  var mockAgentForTest: MockAgent;
}

// Mock the Agent constructor from undici to use our MockAgent instance
jest.mock('undici', () => {
  // Store the actual implementation
  const originalModule = jest.requireActual('undici');

  return {
    ...originalModule,
    // Mock agent constructor to return our mockAgent
    Agent: jest.fn().mockImplementation(() => {
      // We'll set this in the test
      return global.mockAgentForTest;
    }),
  };
});
/* eslint-enable */

describe('createRetryAgent', () => {
  let mockAgent: MockAgent;
  let mockPool: MockPool;

  beforeEach(() => {
    mockAgent = new MockAgent();
    mockAgent.disableNetConnect();
    // Store the mockAgent in a global variable so our mocked Agent constructor can access it
    global.mockAgentForTest = mockAgent;
    mockPool = mockAgent.get('http://localhost:8080');
  });

  afterEach(async () => {
    await mockAgent.close();
    // Optional property can be deleted
    // @ts-expect-error its a global variable
    delete global.mockAgentForTest;
  });

  it('should retry on failure and succeed on retry', async () => {
    expect.assertions(2);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(500, 'fail').times(1);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(200, 'ok').times(1);

    const agent = createRetryAgent({
      retry: { maxRetries: 1, statusCodes: [500] },
      agentOptions: { keepAliveTimeout: 1 },
    });
    try {
      const req = agent.request({ origin: 'http://localhost:8080', path: '/test', method: 'GET' });
      const res = await req;

      expect(res.statusCode).toBe(200);
      const data = await res.body.text();
      expect(data).toBe('ok');
    } catch (error) {
      console.error('Request failed:', error);
    }
  });

  it('should not retry if status code is not in statusCodes', async () => {
    expect.assertions(1);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(404, 'not found').times(1);
    const agent = createRetryAgent({
      retry: { maxRetries: 2, statusCodes: [500] },
      agentOptions: { keepAliveTimeout: 1 },
    });
    const req = agent.request({ origin: 'http://localhost:8080', path: '/test', method: 'GET' });
    const res = await req;
    expect(res.statusCode).toBe(404);
  });

  it('should respect initialBaseRetryDelayMs and maxJitterFactor', async () => {
    expect.assertions(1);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(500, 'fail').times(2);
    const start = Date.now();
    const agent = createRetryAgent({
      retry: { maxRetries: 1, statusCodes: [500], initialBaseRetryDelayMs: 200, maxJitterFactor: 0 },
      agentOptions: { keepAliveTimeout: 1 },
    });
    const req = agent.request({ origin: 'http://localhost:8080', path: '/test', method: 'GET' });
    await req.catch(() => {});
    const elapsed = Date.now() - start;
    expect(elapsed).toBeGreaterThanOrEqual(200);
  });

  it('should disable jitter if disableJitter is true', async () => {
    expect.assertions(1);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(500, 'fail').times(2);
    const start = Date.now();
    const agent = createRetryAgent({
      retry: { maxRetries: 1, statusCodes: [500], initialBaseRetryDelayMs: 100, disableJitter: true },
      agentOptions: { keepAliveTimeout: 1 },
    });
    const req = agent.request({ origin: 'http://localhost:8080', path: '/test', method: 'GET' });
    await req.catch(() => {});
    const elapsed = Date.now() - start;
    expect(elapsed).toBeGreaterThanOrEqual(100);
  });

  it('should abort after maxRetries', async () => {
    expect.assertions(1);
    mockPool.intercept({ path: '/test', method: 'GET' }).reply(500, 'fail').times(3);
    const agent = createRetryAgent({
      retry: { maxRetries: 2, statusCodes: [500] },
      agentOptions: { keepAliveTimeout: 1 },
    });
    await expect(agent.request({ origin: 'http://localhost:8080', path: '/test', method: 'GET' })).rejects.toThrow();
  });
});
